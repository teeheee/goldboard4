
goldboard4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000d88  00000e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  0080007a  0080007a  00000e36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004843  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000181d  00000000  00000000  00005a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b1  00000000  00000000  000072ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000998  00000000  00000000  00008c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001550  00000000  00000000  000095f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026e0  00000000  00000000  0000ab48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_4>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_10>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_13>
  38:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_14>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_19>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	16 06       	cpc	r1, r22
  56:	64 06       	cpc	r6, r20

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d8 e0       	ldi	r29, 0x08	; 8
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	e8 e8       	ldi	r30, 0x88	; 136
  6c:	fd e0       	ldi	r31, 0x0D	; 13
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	aa 37       	cpi	r26, 0x7A	; 122
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	aa e7       	ldi	r26, 0x7A	; 122
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	cc e2       	ldi	r28, 0x2C	; 44
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
  92:	21 97       	sbiw	r28, 0x01	; 1
  94:	fe 01       	movw	r30, r28
  96:	0e 94 b3 06 	call	0xd66	; 0xd66 <__tablejump2__>
  9a:	ca 32       	cpi	r28, 0x2A	; 42
  9c:	d1 07       	cpc	r29, r17
  9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
  a0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <main>
  a4:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <_ZN10Goldboard4C1Ev>:
/******************* Goldboard Member Functions **********************/



// default constructor
Goldboard4::Goldboard4()
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	7c 01       	movw	r14, r24
  be:	ec 01       	movw	r28, r24
  c0:	8c 01       	movw	r16, r24
  c2:	04 5f       	subi	r16, 0xF4	; 244
  c4:	1f 4f       	sbci	r17, 0xFF	; 255
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN5MotorC1Ev>
  cc:	23 96       	adiw	r28, 0x03	; 3
  ce:	0c 17       	cp	r16, r28
  d0:	1d 07       	cpc	r17, r29
  d2:	c9 f7       	brne	.-14     	; 0xc6 <_ZN10Goldboard4C1Ev+0x1a>
  d4:	e7 01       	movw	r28, r14
  d6:	2c 96       	adiw	r28, 0x0c	; 12
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 48 02 	call	0x490	; 0x490 <_ZN8PCF8574AC1Ev>
  de:	67 01       	movw	r12, r14
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	c8 0e       	add	r12, r24
  e4:	d1 1c       	adc	r13, r1
  e6:	c6 01       	movw	r24, r12
  e8:	0e 94 48 02 	call	0x490	; 0x490 <_ZN8PCF8574AC1Ev>
{
	uint8_t count;
	init_timer();
  ec:	0e 94 67 04 	call	0x8ce	; 0x8ce <_Z10init_timerv>
	
	twi_init();
  f0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z8twi_initv>
	
	// Portexpanders
	digital.init(PCF8574A_DIGITAL_ADDRESS);
  f4:	6f e3       	ldi	r22, 0x3F	; 63
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN8PCF8574A4initEh>
	_pcf8574.init(PCF8574A_MOTOR_ADDRESS);
  fc:	68 e3       	ldi	r22, 0x38	; 56
  fe:	c6 01       	movw	r24, r12
 100:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN8PCF8574A4initEh>
 104:	87 01       	movw	r16, r14
	
	// Motors
	for (count=0; count<4; count++)
 106:	c0 e0       	ldi	r28, 0x00	; 0
		motor[count].init(count,&_pcf8574);
 108:	a6 01       	movw	r20, r12
 10a:	6c 2f       	mov	r22, r28
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 20 02 	call	0x440	; 0x440 <_ZN5Motor4initEhP8PCF8574A>
	// Portexpanders
	digital.init(PCF8574A_DIGITAL_ADDRESS);
	_pcf8574.init(PCF8574A_MOTOR_ADDRESS);
	
	// Motors
	for (count=0; count<4; count++)
 112:	cf 5f       	subi	r28, 0xFF	; 255
 114:	0d 5f       	subi	r16, 0xFD	; 253
 116:	1f 4f       	sbci	r17, 0xFF	; 255
 118:	c4 30       	cpi	r28, 0x04	; 4
 11a:	b1 f7       	brne	.-20     	; 0x108 <_ZN10Goldboard4C1Ev+0x5c>
		motor[count].init(count,&_pcf8574);
	
	
	_analogPulseInputConfiguration = 0;
 11c:	f7 01       	movw	r30, r14
 11e:	14 8a       	std	Z+20, r1	; 0x14
	count = 0;
	for (count=0; count<BTLEDCOUNT; count++)
	{
		//pinMode(BTLEDARRAY[count], INPUT_PULLUP);
		//digitalWrite(BTLEDARRAY[count], HIGH);
		_isLED[count] = false;
 120:	12 8a       	std	Z+18, r1	; 0x12
 122:	13 8a       	std	Z+19, r1	; 0x13
	// Power
	count = 0;
	for (count=0; count<PCOUNT; count++);
	//pinMode(PARRAY[count], OUTPUT);
	
} //Goldboard4
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	08 95       	ret

00000136 <_Z10initMotorsP8PCF8574A>:
	}
}

void setMotorSpeed(uint8_t id, int speed)
{
	soll_motor_speed[id] = speed;
 136:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 13a:	22 23       	and	r18, r18
 13c:	41 f0       	breq	.+16     	; 0x14e <_Z10initMotorsP8PCF8574A+0x18>
 13e:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <directionPortexpander+0x1>
 142:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <directionPortexpander>
 146:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z7initPwmv>
 14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 14e:	08 95       	ret

00000150 <_Z9motor_isrv>:
		pwm_change_flag = 1;
	}
}

void motor_isr() //100hz
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
	sei();
 154:	78 94       	sei
}


inline void accelerationHandle(uint8_t id)
{
	int ist = ist_motor_speed[id];
 156:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <ist_motor_speed>
 15a:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <ist_motor_speed+0x1>
	int soll = soll_motor_speed[id];
 15e:	c0 91 7b 00 	lds	r28, 0x007B	; 0x80007b <soll_motor_speed>
 162:	d0 91 7c 00 	lds	r29, 0x007C	; 0x80007c <soll_motor_speed+0x1>
	if(ist != soll)
 166:	2c 17       	cp	r18, r28
 168:	3d 07       	cpc	r19, r29
 16a:	09 f4       	brne	.+2      	; 0x16e <_Z9motor_isrv+0x1e>
 16c:	4a c0       	rjmp	.+148    	; 0x202 <_Z9motor_isrv+0xb2>
	{
		int diff = soll - ist;
 16e:	ae 01       	movw	r20, r28
 170:	42 1b       	sub	r20, r18
 172:	53 0b       	sbc	r21, r19
		int istNeu = ist;
		if(diff > acceleration)
 174:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <acceleration>
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	84 17       	cp	r24, r20
 17c:	95 07       	cpc	r25, r21
 17e:	24 f4       	brge	.+8      	; 0x188 <_Z9motor_isrv+0x38>
			istNeu += acceleration;
 180:	e9 01       	movw	r28, r18
 182:	c8 0f       	add	r28, r24
 184:	d9 1f       	adc	r29, r25
 186:	0a c0       	rjmp	.+20     	; 0x19c <_Z9motor_isrv+0x4c>
		else if(diff < -acceleration)
 188:	66 27       	eor	r22, r22
 18a:	77 27       	eor	r23, r23
 18c:	68 1b       	sub	r22, r24
 18e:	79 0b       	sbc	r23, r25
 190:	46 17       	cp	r20, r22
 192:	57 07       	cpc	r21, r23
 194:	1c f4       	brge	.+6      	; 0x19c <_Z9motor_isrv+0x4c>
			istNeu -= acceleration;
 196:	e9 01       	movw	r28, r18
 198:	c8 1b       	sub	r28, r24
 19a:	d9 0b       	sbc	r29, r25
		else
			istNeu = soll;
		if(istNeu < 0) 
 19c:	dd 23       	and	r29, r29
 19e:	b4 f4       	brge	.+44     	; 0x1cc <_Z9motor_isrv+0x7c>
		{
			directionPortexpander->setPin(id, true);
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 1a8:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 1ac:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, false);
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 1b8:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 1bc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(-istNeu));
 1c0:	6c 2f       	mov	r22, r28
 1c2:	61 95       	neg	r22
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
 1ca:	14 c0       	rjmp	.+40     	; 0x1f4 <_Z9motor_isrv+0xa4>
		}
		else
		{
			directionPortexpander->setPin(id, false);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 1d4:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 1d8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, true);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 1e4:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 1e8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(istNeu));	
 1ec:	6c 2f       	mov	r22, r28
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
		}
		ist_motor_speed[id] = istNeu;
 1f4:	d0 93 84 00 	sts	0x0084, r29	; 0x800084 <ist_motor_speed+0x1>
 1f8:	c0 93 83 00 	sts	0x0083, r28	; 0x800083 <ist_motor_speed>
		pwm_change_flag = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
}


inline void accelerationHandle(uint8_t id)
{
	int ist = ist_motor_speed[id];
 202:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <ist_motor_speed+0x2>
 206:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <ist_motor_speed+0x3>
	int soll = soll_motor_speed[id];
 20a:	c0 91 7d 00 	lds	r28, 0x007D	; 0x80007d <soll_motor_speed+0x2>
 20e:	d0 91 7e 00 	lds	r29, 0x007E	; 0x80007e <soll_motor_speed+0x3>
	if(ist != soll)
 212:	2c 17       	cp	r18, r28
 214:	3d 07       	cpc	r19, r29
 216:	09 f4       	brne	.+2      	; 0x21a <_Z9motor_isrv+0xca>
 218:	4a c0       	rjmp	.+148    	; 0x2ae <_Z9motor_isrv+0x15e>
	{
		int diff = soll - ist;
 21a:	ae 01       	movw	r20, r28
 21c:	42 1b       	sub	r20, r18
 21e:	53 0b       	sbc	r21, r19
		int istNeu = ist;
		if(diff > acceleration)
 220:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <acceleration>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	84 17       	cp	r24, r20
 228:	95 07       	cpc	r25, r21
 22a:	24 f4       	brge	.+8      	; 0x234 <_Z9motor_isrv+0xe4>
			istNeu += acceleration;
 22c:	e9 01       	movw	r28, r18
 22e:	c8 0f       	add	r28, r24
 230:	d9 1f       	adc	r29, r25
 232:	0a c0       	rjmp	.+20     	; 0x248 <_Z9motor_isrv+0xf8>
		else if(diff < -acceleration)
 234:	66 27       	eor	r22, r22
 236:	77 27       	eor	r23, r23
 238:	68 1b       	sub	r22, r24
 23a:	79 0b       	sbc	r23, r25
 23c:	46 17       	cp	r20, r22
 23e:	57 07       	cpc	r21, r23
 240:	1c f4       	brge	.+6      	; 0x248 <_Z9motor_isrv+0xf8>
			istNeu -= acceleration;
 242:	e9 01       	movw	r28, r18
 244:	c8 1b       	sub	r28, r24
 246:	d9 0b       	sbc	r29, r25
		else
			istNeu = soll;
		if(istNeu < 0) 
 248:	dd 23       	and	r29, r29
 24a:	b4 f4       	brge	.+44     	; 0x278 <_Z9motor_isrv+0x128>
		{
			directionPortexpander->setPin(id, true);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 254:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 258:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, false);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 264:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 268:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(-istNeu));
 26c:	6c 2f       	mov	r22, r28
 26e:	61 95       	neg	r22
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <_Z9motor_isrv+0x150>
		}
		else
		{
			directionPortexpander->setPin(id, false);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 280:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 284:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, true);
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 290:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 294:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(istNeu));	
 298:	6c 2f       	mov	r22, r28
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
		}
		ist_motor_speed[id] = istNeu;
 2a0:	d0 93 86 00 	sts	0x0086, r29	; 0x800086 <ist_motor_speed+0x3>
 2a4:	c0 93 85 00 	sts	0x0085, r28	; 0x800085 <ist_motor_speed+0x2>
		pwm_change_flag = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
}


inline void accelerationHandle(uint8_t id)
{
	int ist = ist_motor_speed[id];
 2ae:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <ist_motor_speed+0x4>
 2b2:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <ist_motor_speed+0x5>
	int soll = soll_motor_speed[id];
 2b6:	c0 91 7f 00 	lds	r28, 0x007F	; 0x80007f <soll_motor_speed+0x4>
 2ba:	d0 91 80 00 	lds	r29, 0x0080	; 0x800080 <soll_motor_speed+0x5>
	if(ist != soll)
 2be:	2c 17       	cp	r18, r28
 2c0:	3d 07       	cpc	r19, r29
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <_Z9motor_isrv+0x176>
 2c4:	54 c0       	rjmp	.+168    	; 0x36e <_Z9motor_isrv+0x21e>
	{
		int diff = soll - ist;
 2c6:	ae 01       	movw	r20, r28
 2c8:	42 1b       	sub	r20, r18
 2ca:	53 0b       	sbc	r21, r19
		int istNeu = ist;
		if(diff > acceleration)
 2cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <acceleration>
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	84 17       	cp	r24, r20
 2d4:	95 07       	cpc	r25, r21
 2d6:	24 f4       	brge	.+8      	; 0x2e0 <_Z9motor_isrv+0x190>
			istNeu += acceleration;
 2d8:	e9 01       	movw	r28, r18
 2da:	c8 0f       	add	r28, r24
 2dc:	d9 1f       	adc	r29, r25
 2de:	0a c0       	rjmp	.+20     	; 0x2f4 <_Z9motor_isrv+0x1a4>
		else if(diff < -acceleration)
 2e0:	66 27       	eor	r22, r22
 2e2:	77 27       	eor	r23, r23
 2e4:	68 1b       	sub	r22, r24
 2e6:	79 0b       	sbc	r23, r25
 2e8:	46 17       	cp	r20, r22
 2ea:	57 07       	cpc	r21, r23
 2ec:	1c f4       	brge	.+6      	; 0x2f4 <_Z9motor_isrv+0x1a4>
			istNeu -= acceleration;
 2ee:	e9 01       	movw	r28, r18
 2f0:	c8 1b       	sub	r28, r24
 2f2:	d9 0b       	sbc	r29, r25
		else
			istNeu = soll;
		if(istNeu < 0) 
 2f4:	dd 23       	and	r29, r29
 2f6:	b4 f4       	brge	.+44     	; 0x324 <_Z9motor_isrv+0x1d4>
		{
			directionPortexpander->setPin(id, true);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 300:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 304:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, false);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 310:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 314:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(-istNeu));
 318:	6c 2f       	mov	r22, r28
 31a:	61 95       	neg	r22
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
 322:	14 c0       	rjmp	.+40     	; 0x34c <_Z9motor_isrv+0x1fc>
		}
		else
		{
			directionPortexpander->setPin(id, false);
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 32c:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 330:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, true);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 33c:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 340:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(istNeu));	
 344:	6c 2f       	mov	r22, r28
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
		}
		ist_motor_speed[id] = istNeu;
 34c:	e3 e8       	ldi	r30, 0x83	; 131
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	d5 83       	std	Z+5, r29	; 0x05
 352:	c4 83       	std	Z+4, r28	; 0x04
		pwm_change_flag = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
}


inline void accelerationHandle(uint8_t id)
{
	int ist = ist_motor_speed[id];
 35a:	26 81       	ldd	r18, Z+6	; 0x06
 35c:	37 81       	ldd	r19, Z+7	; 0x07
	int soll = soll_motor_speed[id];
 35e:	c0 91 81 00 	lds	r28, 0x0081	; 0x800081 <soll_motor_speed+0x6>
 362:	d0 91 82 00 	lds	r29, 0x0082	; 0x800082 <soll_motor_speed+0x7>
	if(ist != soll)
 366:	2c 17       	cp	r18, r28
 368:	3d 07       	cpc	r19, r29
 36a:	69 f4       	brne	.+26     	; 0x386 <_Z9motor_isrv+0x236>
 36c:	5b c0       	rjmp	.+182    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
}


inline void accelerationHandle(uint8_t id)
{
	int ist = ist_motor_speed[id];
 36e:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <ist_motor_speed+0x6>
 372:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <ist_motor_speed+0x7>
	int soll = soll_motor_speed[id];
 376:	c0 91 81 00 	lds	r28, 0x0081	; 0x800081 <soll_motor_speed+0x6>
 37a:	d0 91 82 00 	lds	r29, 0x0082	; 0x800082 <soll_motor_speed+0x7>
	if(ist != soll)
 37e:	2c 17       	cp	r18, r28
 380:	3d 07       	cpc	r19, r29
 382:	09 f4       	brne	.+2      	; 0x386 <_Z9motor_isrv+0x236>
 384:	4b c0       	rjmp	.+150    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		int diff = soll - ist;
 386:	ae 01       	movw	r20, r28
 388:	42 1b       	sub	r20, r18
 38a:	53 0b       	sbc	r21, r19
		int istNeu = ist;
		if(diff > acceleration)
 38c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <acceleration>
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	84 17       	cp	r24, r20
 394:	95 07       	cpc	r25, r21
 396:	24 f4       	brge	.+8      	; 0x3a0 <_Z9motor_isrv+0x250>
			istNeu += acceleration;
 398:	ec 01       	movw	r28, r24
 39a:	c2 0f       	add	r28, r18
 39c:	d3 1f       	adc	r29, r19
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <_Z9motor_isrv+0x264>
		else if(diff < -acceleration)
 3a0:	66 27       	eor	r22, r22
 3a2:	77 27       	eor	r23, r23
 3a4:	68 1b       	sub	r22, r24
 3a6:	79 0b       	sbc	r23, r25
 3a8:	46 17       	cp	r20, r22
 3aa:	57 07       	cpc	r21, r23
 3ac:	1c f4       	brge	.+6      	; 0x3b4 <_Z9motor_isrv+0x264>
			istNeu -= acceleration;
 3ae:	e9 01       	movw	r28, r18
 3b0:	c8 1b       	sub	r28, r24
 3b2:	d9 0b       	sbc	r29, r25
		else
			istNeu = soll;
		if(istNeu < 0) 
 3b4:	dd 23       	and	r29, r29
 3b6:	b4 f4       	brge	.+44     	; 0x3e4 <_Z9motor_isrv+0x294>
		{
			directionPortexpander->setPin(id, true);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 3c0:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 3c4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, false);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 3d0:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 3d4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(-istNeu));
 3d8:	6c 2f       	mov	r22, r28
 3da:	61 95       	neg	r22
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
 3e2:	14 c0       	rjmp	.+40     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}
		else
		{
			directionPortexpander->setPin(id, false);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 3ec:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 3f0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			directionPortexpander->setPin(id+1, true);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	64 e0       	ldi	r22, 0x04	; 4
 3f8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 3fc:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 400:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8PCF8574A6setPinEhb>
			setPwm(id,uint8_t(istNeu));	
 404:	6c 2f       	mov	r22, r28
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	0e 94 13 03 	call	0x626	; 0x626 <_Z6setPwmhh>
		}
		ist_motor_speed[id] = istNeu;
 40c:	d0 93 8a 00 	sts	0x008A, r29	; 0x80008a <ist_motor_speed+0x7>
 410:	c0 93 89 00 	sts	0x0089, r28	; 0x800089 <ist_motor_speed+0x6>
		pwm_change_flag = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	sei();
	accelerationHandle(0);
	accelerationHandle(1);
	accelerationHandle(2);
	accelerationHandle(3);
	if(pwm_change_flag)
 41c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 420:	88 23       	and	r24, r24
 422:	51 f0       	breq	.+20     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		updatePwm();
 424:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9updatePwmv>
		directionPortexpander->write();
 428:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <directionPortexpander>
 42c:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <directionPortexpander+0x1>
 430:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN8PCF8574A5writeEv>
		pwm_change_flag = 0;
 434:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
	}
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <_ZN5MotorC1Ev>:


Motor::Motor()
 43e:	08 95       	ret

00000440 <_ZN5Motor4initEhP8PCF8574A>:
{
	
}

void Motor::init(uint8_t pwmPin, PCF8574A* pcf8574)
{
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
 44c:	f6 2e       	mov	r15, r22
 44e:	8a 01       	movw	r16, r20
	initMotors(pcf8574);
 450:	ca 01       	movw	r24, r20
 452:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10initMotorsP8PCF8574A>
	_directionPortexpander = pcf8574;
 456:	1a 83       	std	Y+2, r17	; 0x02
 458:	09 83       	std	Y+1, r16	; 0x01
	_pwmPin = pwmPin;
 45a:	f8 82       	st	Y, r15
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	08 95       	ret

00000468 <_ZN5Motor6rotateEi>:


void Motor::rotate(int16_t sp)
{
 468:	fc 01       	movw	r30, r24
	setMotorSpeed(_pwmPin,(sp*255)/100);
 46a:	2f ef       	ldi	r18, 0xFF	; 255
 46c:	26 9f       	mul	r18, r22
 46e:	c0 01       	movw	r24, r0
 470:	27 9f       	mul	r18, r23
 472:	90 0d       	add	r25, r0
 474:	11 24       	eor	r1, r1
 476:	64 e6       	ldi	r22, 0x64	; 100
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__divmodhi4>
	}
}

void setMotorSpeed(uint8_t id, int speed)
{
	soll_motor_speed[id] = speed;
 47e:	e0 81       	ld	r30, Z
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	e5 58       	subi	r30, 0x85	; 133
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	71 83       	std	Z+1, r23	; 0x01
 48c:	60 83       	st	Z, r22
 48e:	08 95       	ret

00000490 <_ZN8PCF8574AC1Ev>:
{
	//i2cRead (_address + 1, 0, &_pcfdata, 1);
	twi_read(_address,1,0);
	_pcfdata = *twi_wait();
	return _pcfdata;
}
 490:	fc 01       	movw	r30, r24
 492:	10 82       	st	Z, r1
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	21 83       	std	Z+1, r18	; 0x01
 498:	08 95       	ret

0000049a <_ZN8PCF8574A4initEh>:
 49a:	fc 01       	movw	r30, r24
 49c:	62 83       	std	Z+2, r22	; 0x02
 49e:	08 95       	ret

000004a0 <_ZN8PCF8574A6setPinEhb>:
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 81       	ld	r18, Z
 4a4:	44 23       	and	r20, r20
 4a6:	51 f0       	breq	.+20     	; 0x4bc <_ZN8PCF8574A6setPinEhb+0x1c>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <_ZN8PCF8574A6setPinEhb+0x12>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <_ZN8PCF8574A6setPinEhb+0xe>
 4b6:	82 2b       	or	r24, r18
 4b8:	80 83       	st	Z, r24
 4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <_ZN8PCF8574A6setPinEhb+0x30>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <_ZN8PCF8574A6setPinEhb+0x26>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <_ZN8PCF8574A6setPinEhb+0x22>
 4ca:	80 95       	com	r24
 4cc:	82 23       	and	r24, r18
 4ce:	80 83       	st	Z, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	28 17       	cp	r18, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <_ZN8PCF8574A6setPinEhb+0x3a>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	81 83       	std	Z+1, r24	; 0x01
 4da:	08 95       	ret

000004dc <_ZN8PCF8574A5writeEv>:

void PCF8574A::write()
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
	// only write if it's really needed, i2c writing costs time...
	if (!_writeNeeded)
 4e0:	fc 01       	movw	r30, r24
 4e2:	21 81       	ldd	r18, Z+1	; 0x01
 4e4:	22 23       	and	r18, r18
 4e6:	49 f0       	breq	.+18     	; 0x4fa <_ZN8PCF8574A5writeEv+0x1e>
 4e8:	ec 01       	movw	r28, r24
		return;
		
	//i2cWriteToSlave (_address, &_pcfdata, 1);
	twi_write(_address,&_pcfdata,1,0);
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	bc 01       	movw	r22, r24
 4f2:	82 81       	ldd	r24, Z+2	; 0x02
 4f4:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z9twi_writehPhhPFvhS_E>
	_writeNeeded = false;
 4f8:	19 82       	std	Y+1, r1	; 0x01
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <__vector_4>:


inline void doCopyData();

ISR(TIMER2_COMP_vect) // ca 50 Takte
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	PORTC |= (1<<PC7);
 51a:	af 9a       	sbi	0x15, 7	; 21
	static uint8_t pwm_index = 0;
	
	if(pwm_index == 0) //anfang der PWM Sequenz
 51c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <_ZZ10__vector_4E9pwm_index>
 520:	81 11       	cpse	r24, r1
 522:	42 c0       	rjmp	.+132    	; 0x5a8 <__vector_4+0xa8>
	{ //bits setzen
		if(pwm_sync)
 524:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <pwm_sync>
 528:	88 23       	and	r24, r24
 52a:	11 f1       	breq	.+68     	; 0x570 <__vector_4+0x70>
	} 
}

inline void doCopyData()
{
	uint8_t* tmpOCR = (uint8_t*)workingOCR;
 52c:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <workingOCR>
 530:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <workingOCR+0x1>
	uint8_t* tmpMask = (uint8_t*)workingMask;
 534:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <workingMask>
 538:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <workingMask+0x1>
	workingOCR = loadingOCR;
 53c:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <loadingOCR>
 540:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <loadingOCR+0x1>
 544:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <workingOCR+0x1>
 548:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <workingOCR>
	workingMask = loadingMask;
 54c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <loadingMask>
 550:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <loadingMask+0x1>
 554:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <workingMask+0x1>
 558:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <workingMask>
	loadingOCR = tmpOCR;
 55c:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <loadingOCR+0x1>
 560:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <loadingOCR>
	loadingMask = tmpMask;
 564:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <loadingMask+0x1>
 568:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <loadingMask>
	if(pwm_index == 0) //anfang der PWM Sequenz
	{ //bits setzen
		if(pwm_sync)
		{
			doCopyData();
			pwm_sync = 0;
 56c:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <pwm_sync>
		}
		uint8_t maske = workingMask[pwm_index];
 570:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <workingMask>
 574:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <workingMask+0x1>
 578:	80 81       	ld	r24, Z
		MOTOR_PWM_PORT |= (maske & ALL_MOTOR_PINS);
 57a:	98 b3       	in	r25, 0x18	; 24
 57c:	28 2f       	mov	r18, r24
 57e:	2f 70       	andi	r18, 0x0F	; 15
 580:	92 2b       	or	r25, r18
 582:	98 bb       	out	0x18, r25	; 24
		POWER_PWM_PORT |= ((maske >> 3) & ALL_POWER_PINS);
 584:	92 b3       	in	r25, 0x12	; 18
 586:	86 95       	lsr	r24
 588:	86 95       	lsr	r24
 58a:	86 95       	lsr	r24
 58c:	86 70       	andi	r24, 0x06	; 6
 58e:	89 2b       	or	r24, r25
 590:	82 bb       	out	0x12, r24	; 18
		OCR2 = workingOCR[pwm_index];
 592:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <_ZZ10__vector_4E9pwm_index>
 596:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <workingOCR>
 59a:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <workingOCR+0x1>
 59e:	e8 0f       	add	r30, r24
 5a0:	f1 1d       	adc	r31, r1
 5a2:	80 81       	ld	r24, Z
 5a4:	83 bd       	out	0x23, r24	; 35
 5a6:	1f c0       	rjmp	.+62     	; 0x5e6 <__vector_4+0xe6>
	}
	else
	{ //bits loeschen
		uint8_t maske = workingMask[pwm_index];
 5a8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <workingMask>
 5ac:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <workingMask+0x1>
 5b0:	e8 0f       	add	r30, r24
 5b2:	f1 1d       	adc	r31, r1
 5b4:	80 81       	ld	r24, Z
		MOTOR_PWM_PORT &= ~(maske & ALL_MOTOR_PINS);
 5b6:	28 b3       	in	r18, 0x18	; 24
 5b8:	98 2f       	mov	r25, r24
 5ba:	9f 70       	andi	r25, 0x0F	; 15
 5bc:	90 95       	com	r25
 5be:	92 23       	and	r25, r18
 5c0:	98 bb       	out	0x18, r25	; 24
		POWER_PWM_PORT &= ~((maske >> 3) & ALL_POWER_PINS);
 5c2:	92 b3       	in	r25, 0x12	; 18
 5c4:	86 95       	lsr	r24
 5c6:	86 95       	lsr	r24
 5c8:	86 95       	lsr	r24
 5ca:	86 70       	andi	r24, 0x06	; 6
 5cc:	80 95       	com	r24
 5ce:	89 23       	and	r24, r25
 5d0:	82 bb       	out	0x12, r24	; 18
		OCR2 = workingOCR[pwm_index];
 5d2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <_ZZ10__vector_4E9pwm_index>
 5d6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <workingOCR>
 5da:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <workingOCR+0x1>
 5de:	e8 0f       	add	r30, r24
 5e0:	f1 1d       	adc	r31, r1
 5e2:	80 81       	ld	r24, Z
 5e4:	83 bd       	out	0x23, r24	; 35
	}
	pwm_index++;
 5e6:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <_ZZ10__vector_4E9pwm_index>
 5ea:	8f 5f       	subi	r24, 0xFF	; 255
 5ec:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <_ZZ10__vector_4E9pwm_index>
	if(workingOCR[pwm_index] == 0 || pwm_index == PWM_DATA_SIZE) //Ende erreicht
 5f0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <workingOCR>
 5f4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <workingOCR+0x1>
 5f8:	e8 0f       	add	r30, r24
 5fa:	f1 1d       	adc	r31, r1
 5fc:	90 81       	ld	r25, Z
 5fe:	99 23       	and	r25, r25
 600:	11 f0       	breq	.+4      	; 0x606 <__vector_4+0x106>
 602:	87 30       	cpi	r24, 0x07	; 7
 604:	11 f4       	brne	.+4      	; 0x60a <__vector_4+0x10a>
		pwm_index = 0;
 606:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <_ZZ10__vector_4E9pwm_index>
	PORTC &= ~(1<<PC7);
 60a:	af 98       	cbi	0x15, 7	; 21
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <_Z6setPwmhh>:
	sei();
}

void setPwm(uint8_t id, uint8_t duty)
{
	if(id < PWM_PIN_COUNT)
 626:	86 30       	cpi	r24, 0x06	; 6
 628:	28 f4       	brcc	.+10     	; 0x634 <_Z6setPwmhh+0xe>
		dutyCicles[id] = duty;
 62a:	e8 2f       	mov	r30, r24
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	ef 54       	subi	r30, 0x4F	; 79
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	60 83       	st	Z, r22
 634:	08 95       	ret

00000636 <_Z8sortDatav>:
	calculateOCR(); //527 Takte
	copyData(); // copy with syncing.
}

void sortData() //bubble sort (also try index sorting)
{
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	c5 e0       	ldi	r28, 0x05	; 5
 642:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t n = PWM_PIN_COUNT; n > 1; n--){
		for (uint8_t i = 0; i < n - 1; i++){
 644:	f1 2c       	mov	r15, r1
 646:	00 e0       	ldi	r16, 0x00	; 0
 648:	be 01       	movw	r22, r28
 64a:	1c 16       	cp	r1, r28
 64c:	1d 06       	cpc	r1, r29
 64e:	44 f5       	brge	.+80     	; 0x6a0 <_Z8sortDatav+0x6a>
 650:	8f 2d       	mov	r24, r15
 652:	90 2f       	mov	r25, r16
 654:	40 e0       	ldi	r20, 0x00	; 0
			if (dutyCicles[sortingPointer[i]] > dutyCicles[sortingPointer[i+1]]){
 656:	fc 01       	movw	r30, r24
 658:	e5 55       	subi	r30, 0x55	; 85
 65a:	ff 4f       	sbci	r31, 0xFF	; 255
 65c:	50 81       	ld	r21, Z
 65e:	9c 01       	movw	r18, r24
 660:	2f 5f       	subi	r18, 0xFF	; 255
 662:	3f 4f       	sbci	r19, 0xFF	; 255
 664:	f9 01       	movw	r30, r18
 666:	e5 55       	subi	r30, 0x55	; 85
 668:	ff 4f       	sbci	r31, 0xFF	; 255
 66a:	10 81       	ld	r17, Z
 66c:	a5 2f       	mov	r26, r21
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	af 54       	subi	r26, 0x4F	; 79
 672:	bf 4f       	sbci	r27, 0xFF	; 255
 674:	e1 2f       	mov	r30, r17
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	ef 54       	subi	r30, 0x4F	; 79
 67a:	ff 4f       	sbci	r31, 0xFF	; 255
 67c:	ac 91       	ld	r26, X
 67e:	e0 81       	ld	r30, Z
 680:	ea 17       	cp	r30, r26
 682:	40 f4       	brcc	.+16     	; 0x694 <_Z8sortDatav+0x5e>
				uint8_t pointer = sortingPointer[i];
				sortingPointer[i] = sortingPointer[i+1];
 684:	fc 01       	movw	r30, r24
 686:	e5 55       	subi	r30, 0x55	; 85
 688:	ff 4f       	sbci	r31, 0xFF	; 255
 68a:	10 83       	st	Z, r17
				sortingPointer[i+1] = pointer;
 68c:	f9 01       	movw	r30, r18
 68e:	e5 55       	subi	r30, 0x55	; 85
 690:	ff 4f       	sbci	r31, 0xFF	; 255
 692:	50 83       	st	Z, r21
}

void sortData() //bubble sort (also try index sorting)
{
	for (uint8_t n = PWM_PIN_COUNT; n > 1; n--){
		for (uint8_t i = 0; i < n - 1; i++){
 694:	4f 5f       	subi	r20, 0xFF	; 255
 696:	84 2f       	mov	r24, r20
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	86 17       	cp	r24, r22
 69c:	97 07       	cpc	r25, r23
 69e:	dc f2       	brlt	.-74     	; 0x656 <_Z8sortDatav+0x20>
 6a0:	21 97       	sbiw	r28, 0x01	; 1
	copyData(); // copy with syncing.
}

void sortData() //bubble sort (also try index sorting)
{
	for (uint8_t n = PWM_PIN_COUNT; n > 1; n--){
 6a2:	91 f6       	brne	.-92     	; 0x648 <_Z8sortDatav+0x12>
				sortingPointer[i] = sortingPointer[i+1];
				sortingPointer[i+1] = pointer;
			} 
		} 
	} 
}
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	08 95       	ret

000006b0 <_Z8copyDatav>:
	loadingMask = tmpMask;
}

void copyData() 
{
	while(pwm_sync);
 6b0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <pwm_sync>
 6b4:	81 11       	cpse	r24, r1
 6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <_Z8copyDatav>
	pwm_sync = 1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <pwm_sync>
 6be:	08 95       	ret

000006c0 <_Z12calculateOCRv>:
}

void calculateOCR()
{
 6c0:	cf 92       	push	r12
 6c2:	df 92       	push	r13
 6c4:	ef 92       	push	r14
 6c6:	ff 92       	push	r15
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
	loadingMask[0] = 0;
 6d0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <loadingMask>
 6d4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <loadingMask+0x1>
 6d8:	10 82       	st	Z, r1
 6da:	ab ea       	ldi	r26, 0xAB	; 171
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	41 eb       	ldi	r20, 0xB1	; 177
 6e0:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t time = 0;
	uint8_t edge_index = 0;
 6e2:	30 e0       	ldi	r19, 0x00	; 0
}

void calculateOCR()
{
	loadingMask[0] = 0;
	uint8_t time = 0;
 6e4:	20 e0       	ldi	r18, 0x00	; 0
	{
		uint8_t pin = sortingPointer[pin_index];
		uint8_t dutyCicle = dutyCicles[pin];
		if(dutyCicle > 0)
		{
			loadingMask[0] |= (1 << pin); //rising edge aktivieren
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	70 e0       	ldi	r23, 0x00	; 0
			}
			else
			{
				//because the interrupt is to slow there is only the option for zero offset or MINIMAL_OCR_OFFSET
				if(nextOCR < MINIMAL_OCR_OFFSET)
					nextOCR = MINIMAL_OCR_OFFSET;
 6ea:	0a e0       	ldi	r16, 0x0A	; 10
 6ec:	10 e0       	ldi	r17, 0x00	; 0
	loadingMask[0] = 0;
	uint8_t time = 0;
	uint8_t edge_index = 0;
	for(uint8_t pin_index = 0; pin_index < PWM_PIN_COUNT; pin_index++)
	{
		uint8_t pin = sortingPointer[pin_index];
 6ee:	9d 91       	ld	r25, X+
		uint8_t dutyCicle = dutyCicles[pin];
 6f0:	e9 2f       	mov	r30, r25
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ef 54       	subi	r30, 0x4F	; 79
 6f6:	ff 4f       	sbci	r31, 0xFF	; 255
 6f8:	80 81       	ld	r24, Z
		if(dutyCicle > 0)
 6fa:	88 23       	and	r24, r24
 6fc:	a9 f1       	breq	.+106    	; 0x768 <_Z12calculateOCRv+0xa8>
		{
			loadingMask[0] |= (1 << pin); //rising edge aktivieren
 6fe:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <loadingMask>
 702:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <loadingMask+0x1>
 706:	fb 01       	movw	r30, r22
 708:	02 c0       	rjmp	.+4      	; 0x70e <_Z12calculateOCRv+0x4e>
 70a:	ee 0f       	add	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	9a 95       	dec	r25
 710:	e2 f7       	brpl	.-8      	; 0x70a <_Z12calculateOCRv+0x4a>
 712:	98 81       	ld	r25, Y
 714:	9e 2b       	or	r25, r30
 716:	98 83       	st	Y, r25
			int nextOCR = dutyCicle - time;
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	82 1b       	sub	r24, r18
 71c:	91 09       	sbc	r25, r1
			if(nextOCR < MINIMAL_OCR_OFFSET/2) //because the interrupt is to slow there is only the option for zero offset or MINIMAL_OCR_OFFSET
 71e:	85 30       	cpi	r24, 0x05	; 5
 720:	91 05       	cpc	r25, r1
 722:	54 f4       	brge	.+20     	; 0x738 <_Z12calculateOCRv+0x78>
			{
				loadingMask[edge_index] |= (1 << pin); //falling edge aktivieren
 724:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <loadingMask>
 728:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <loadingMask+0x1>
 72c:	c3 0f       	add	r28, r19
 72e:	d1 1d       	adc	r29, r1
 730:	88 81       	ld	r24, Y
 732:	e8 2b       	or	r30, r24
 734:	e8 83       	st	Y, r30
 736:	18 c0       	rjmp	.+48     	; 0x768 <_Z12calculateOCRv+0xa8>
			}
			else
			{
				//because the interrupt is to slow there is only the option for zero offset or MINIMAL_OCR_OFFSET
				if(nextOCR < MINIMAL_OCR_OFFSET)
 738:	8a 30       	cpi	r24, 0x0A	; 10
 73a:	91 05       	cpc	r25, r1
 73c:	0c f4       	brge	.+2      	; 0x740 <_Z12calculateOCRv+0x80>
					nextOCR = MINIMAL_OCR_OFFSET;
 73e:	80 2f       	mov	r24, r16
				loadingMask[edge_index+1] = (1 << pin); //falling edge aktivieren
 740:	c3 2e       	mov	r12, r19
 742:	d1 2c       	mov	r13, r1
 744:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <loadingMask>
 748:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <loadingMask+0x1>
 74c:	ec 0c       	add	r14, r12
 74e:	fd 1c       	adc	r15, r13
 750:	e7 01       	movw	r28, r14
 752:	e9 83       	std	Y+1, r30	; 0x01
				loadingOCR[edge_index] = nextOCR;
 754:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <loadingOCR>
 758:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <loadingOCR+0x1>
 75c:	e6 01       	movw	r28, r12
 75e:	ce 0f       	add	r28, r30
 760:	df 1f       	adc	r29, r31
 762:	88 83       	st	Y, r24
				time += nextOCR;	
 764:	28 0f       	add	r18, r24
				edge_index++;
 766:	3f 5f       	subi	r19, 0xFF	; 255
void calculateOCR()
{
	loadingMask[0] = 0;
	uint8_t time = 0;
	uint8_t edge_index = 0;
	for(uint8_t pin_index = 0; pin_index < PWM_PIN_COUNT; pin_index++)
 768:	a4 17       	cp	r26, r20
 76a:	b5 07       	cpc	r27, r21
 76c:	09 f0       	breq	.+2      	; 0x770 <_Z12calculateOCRv+0xb0>
 76e:	bf cf       	rjmp	.-130    	; 0x6ee <_Z12calculateOCRv+0x2e>
				time += nextOCR;	
				edge_index++;
			}
		}
	}
	loadingOCR[edge_index] = 0xff-time; //fill the remaining time
 770:	83 2f       	mov	r24, r19
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <loadingOCR>
 778:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <loadingOCR+0x1>
 77c:	e8 0f       	add	r30, r24
 77e:	f9 1f       	adc	r31, r25
 780:	20 95       	com	r18
 782:	20 83       	st	Z, r18
	if(edge_index < PWM_DATA_SIZE-1)
 784:	36 30       	cpi	r19, 0x06	; 6
 786:	40 f4       	brcc	.+16     	; 0x798 <_Z12calculateOCRv+0xd8>
		loadingOCR[edge_index+1] = 0;  // last ocr is 0
 788:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <loadingOCR>
 78c:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <loadingOCR+0x1>
 790:	f9 01       	movw	r30, r18
 792:	e8 0f       	add	r30, r24
 794:	f9 1f       	adc	r31, r25
 796:	11 82       	std	Z+1, r1	; 0x01
}
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	ff 90       	pop	r15
 7a2:	ef 90       	pop	r14
 7a4:	df 90       	pop	r13
 7a6:	cf 90       	pop	r12
 7a8:	08 95       	ret

000007aa <_Z7initPwmv>:
	PORTC &= ~(1<<PC7);
}

void initPwm()
{	
	cli();
 7aa:	f8 94       	cli
	for (int i = 0; i < PWM_PIN_COUNT; i++)
	{
		sortingPointer[i] = i;
 7ac:	eb ea       	ldi	r30, 0xAB	; 171
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	10 82       	st	Z, r1
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	81 83       	std	Z+1, r24	; 0x01
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	82 83       	std	Z+2, r24	; 0x02
 7ba:	83 e0       	ldi	r24, 0x03	; 3
 7bc:	83 83       	std	Z+3, r24	; 0x03
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	84 83       	std	Z+4, r24	; 0x04
 7c2:	85 e0       	ldi	r24, 0x05	; 5
 7c4:	85 83       	std	Z+5, r24	; 0x05
	}
	calculateOCR();
 7c6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12calculateOCRv>
	} 
}

inline void doCopyData()
{
	uint8_t* tmpOCR = (uint8_t*)workingOCR;
 7ca:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <workingOCR>
 7ce:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <workingOCR+0x1>
	uint8_t* tmpMask = (uint8_t*)workingMask;
 7d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <workingMask>
 7d6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <workingMask+0x1>
	workingOCR = loadingOCR;
 7da:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <loadingOCR>
 7de:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <loadingOCR+0x1>
 7e2:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <workingOCR+0x1>
 7e6:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <workingOCR>
	workingMask = loadingMask;
 7ea:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <loadingMask>
 7ee:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <loadingMask+0x1>
 7f2:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <workingMask+0x1>
 7f6:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <workingMask>
	loadingOCR = tmpOCR;
 7fa:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <loadingOCR+0x1>
 7fe:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <loadingOCR>
	loadingMask = tmpMask;
 802:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <loadingMask+0x1>
 806:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <loadingMask>
		sortingPointer[i] = i;
	}
	calculateOCR();
	doCopyData(); //copy without syncing
	
	MOTOR_PWM_DDR |= ALL_MOTOR_PINS;
 80a:	87 b3       	in	r24, 0x17	; 23
 80c:	8f 60       	ori	r24, 0x0F	; 15
 80e:	87 bb       	out	0x17, r24	; 23
	POWER_PWM_DDR |= ALL_POWER_PINS;
 810:	81 b3       	in	r24, 0x11	; 17
 812:	86 60       	ori	r24, 0x06	; 6
 814:	81 bb       	out	0x11, r24	; 17

	TCCR2 |= (1 << CS21) | (1 << CS20) | (1 << WGM21);
 816:	85 b5       	in	r24, 0x25	; 37
 818:	8b 60       	ori	r24, 0x0B	; 11
 81a:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2);
 81c:	89 b7       	in	r24, 0x39	; 57
 81e:	80 68       	ori	r24, 0x80	; 128
 820:	89 bf       	out	0x39, r24	; 57
	OCR2 = 255;
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	83 bd       	out	0x23, r24	; 35
	sei();
 826:	78 94       	sei
 828:	08 95       	ret

0000082a <_Z9updatePwmv>:
		dutyCicles[id] = duty;
}

void updatePwm() //1393 Takte
{
	sortData(); //637 Takte
 82a:	0e 94 1b 03 	call	0x636	; 0x636 <_Z8sortDatav>
	calculateOCR(); //527 Takte
 82e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z12calculateOCRv>
	copyData(); // copy with syncing.
 832:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8copyDatav>
 836:	08 95       	ret

00000838 <__vector_10>:
#include "infrared_pulse.h"

volatile uint32_t time_in_ms;

ISR(TIMER0_COMP_vect) //1khz
{
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
	PORTC |= (1<<PC6);
 85a:	ae 9a       	sbi	0x15, 6	; 21
	time_in_ms++;
 85c:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <time_in_ms>
 860:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <time_in_ms+0x1>
 864:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <time_in_ms+0x2>
 868:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <time_in_ms+0x3>
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	a1 1d       	adc	r26, r1
 870:	b1 1d       	adc	r27, r1
 872:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <time_in_ms>
 876:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <time_in_ms+0x1>
 87a:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <time_in_ms+0x2>
 87e:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <time_in_ms+0x3>
	if(time_in_ms%10 == 0)
 882:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <time_in_ms>
 886:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <time_in_ms+0x1>
 88a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <time_in_ms+0x2>
 88e:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <time_in_ms+0x3>
 892:	2a e0       	ldi	r18, 0x0A	; 10
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	40 e0       	ldi	r20, 0x00	; 0
 898:	50 e0       	ldi	r21, 0x00	; 0
 89a:	0e 94 91 06 	call	0xd22	; 0xd22 <__udivmodsi4>
 89e:	67 2b       	or	r22, r23
 8a0:	68 2b       	or	r22, r24
 8a2:	69 2b       	or	r22, r25
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__stack+0x4b>
		motor_isr();
 8a6:	0e 94 a8 00 	call	0x150	; 0x150 <_Z9motor_isrv>
	//pulse_isr();
	PORTC &= ~(1<<PC6);
 8aa:	ae 98       	cbi	0x15, 6	; 21
}
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	bf 91       	pop	r27
 8b2:	af 91       	pop	r26
 8b4:	9f 91       	pop	r25
 8b6:	8f 91       	pop	r24
 8b8:	7f 91       	pop	r23
 8ba:	6f 91       	pop	r22
 8bc:	5f 91       	pop	r21
 8be:	4f 91       	pop	r20
 8c0:	3f 91       	pop	r19
 8c2:	2f 91       	pop	r18
 8c4:	0f 90       	pop	r0
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	0f 90       	pop	r0
 8ca:	1f 90       	pop	r1
 8cc:	18 95       	reti

000008ce <_Z10init_timerv>:

void init_timer()
{
	TCCR0 |= (1 << CS00) | (1 << CS01) | (1 << WGM01);
 8ce:	83 b7       	in	r24, 0x33	; 51
 8d0:	8b 60       	ori	r24, 0x0B	; 11
 8d2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << OCIE0);
 8d4:	89 b7       	in	r24, 0x39	; 57
 8d6:	82 60       	ori	r24, 0x02	; 2
 8d8:	89 bf       	out	0x39, r24	; 57
	OCR0 = 250;
 8da:	8a ef       	ldi	r24, 0xFA	; 250
 8dc:	8c bf       	out	0x3c, r24	; 60
	sei();
 8de:	78 94       	sei
 8e0:	08 95       	ret

000008e2 <_Z8twi_initv>:
	transmission.mode = MODE_REG_READ;
	transmission.index = 0;
	transmission.callback = callback;

	twi_start();
}
 8e2:	88 e4       	ldi	r24, 0x48	; 72
 8e4:	80 b9       	out	0x00, r24	; 0
 8e6:	81 b1       	in	r24, 0x01	; 1
 8e8:	8c 7f       	andi	r24, 0xFC	; 252
 8ea:	81 b9       	out	0x01, r24	; 1
 8ec:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <_ZL4busy>
 8f0:	78 94       	sei
 8f2:	84 e0       	ldi	r24, 0x04	; 4
 8f4:	86 bf       	out	0x36, r24	; 54
 8f6:	85 b3       	in	r24, 0x15	; 21
 8f8:	83 60       	ori	r24, 0x03	; 3
 8fa:	85 bb       	out	0x15, r24	; 21
 8fc:	08 95       	ret

000008fe <_Z8twi_waitv>:
 8fe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <_ZL4busy>
 902:	81 11       	cpse	r24, r1
 904:	fc cf       	rjmp	.-8      	; 0x8fe <_Z8twi_waitv>
 906:	8c eb       	ldi	r24, 0xBC	; 188
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	08 95       	ret

0000090c <_Z8twi_recvv>:
 90c:	ab eb       	ldi	r26, 0xBB	; 187
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	92 96       	adiw	r26, 0x22	; 34
 912:	ec 91       	ld	r30, X
 914:	92 97       	sbiw	r26, 0x22	; 34
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	8e 0f       	add	r24, r30
 91a:	92 96       	adiw	r26, 0x22	; 34
 91c:	8c 93       	st	X, r24
 91e:	83 b1       	in	r24, 0x03	; 3
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	e5 54       	subi	r30, 0x45	; 69
 924:	ff 4f       	sbci	r31, 0xFF	; 255
 926:	80 83       	st	Z, r24
 928:	08 95       	ret

0000092a <_Z9twi_replyv>:
 92a:	eb eb       	ldi	r30, 0xBB	; 187
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	22 a1       	ldd	r18, Z+34	; 0x22
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	80 a1       	ldd	r24, Z+32	; 0x20
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	01 97       	sbiw	r24, 0x01	; 1
 938:	28 17       	cp	r18, r24
 93a:	39 07       	cpc	r19, r25
 93c:	1c f4       	brge	.+6      	; 0x944 <_Z9twi_replyv+0x1a>
 93e:	85 ec       	ldi	r24, 0xC5	; 197
 940:	86 bf       	out	0x36, r24	; 54
 942:	08 95       	ret
 944:	85 e8       	ldi	r24, 0x85	; 133
 946:	86 bf       	out	0x36, r24	; 54
 948:	08 95       	ret

0000094a <_Z8twi_donev>:
 94a:	eb eb       	ldi	r30, 0xBB	; 187
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	95 95       	asr	r25
 954:	87 95       	ror	r24
 956:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <_ZL4busy>
 95a:	03 a0       	ldd	r0, Z+35	; 0x23
 95c:	f4 a1       	ldd	r31, Z+36	; 0x24
 95e:	e0 2d       	mov	r30, r0
 960:	30 97       	sbiw	r30, 0x00	; 0
 962:	19 f0       	breq	.+6      	; 0x96a <_Z8twi_donev+0x20>
 964:	6c eb       	ldi	r22, 0xBC	; 188
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	09 95       	icall
 96a:	08 95       	ret

0000096c <_Z9twi_writehPhhPFvhS_E>:
 96c:	ef 92       	push	r14
 96e:	ff 92       	push	r15
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	d8 2f       	mov	r29, r24
 97a:	8b 01       	movw	r16, r22
 97c:	c4 2f       	mov	r28, r20
 97e:	79 01       	movw	r14, r18
 980:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_Z8twi_waitv>
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <_ZL4busy>
 98a:	eb eb       	ldi	r30, 0xBB	; 187
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	dd 0f       	add	r29, r29
 990:	d0 83       	st	Z, r29
 992:	8c 0f       	add	r24, r28
 994:	80 a3       	std	Z+32, r24	; 0x20
 996:	11 a2       	std	Z+33, r1	; 0x21
 998:	12 a2       	std	Z+34, r1	; 0x22
 99a:	f4 a2       	std	Z+36, r15	; 0x24
 99c:	e3 a2       	std	Z+35, r14	; 0x23
 99e:	4c 2f       	mov	r20, r28
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	b8 01       	movw	r22, r16
 9a4:	8c eb       	ldi	r24, 0xBC	; 188
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 b9 06 	call	0xd72	; 0xd72 <memcpy>
 9ac:	85 ea       	ldi	r24, 0xA5	; 165
 9ae:	86 bf       	out	0x36, r24	; 54
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ff 90       	pop	r15
 9ba:	ef 90       	pop	r14
 9bc:	08 95       	ret

000009be <__vector_19>:


ISR(TWI_vect) {
 9be:	1f 92       	push	r1
 9c0:	0f 92       	push	r0
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	0f 92       	push	r0
 9c6:	11 24       	eor	r1, r1
 9c8:	2f 93       	push	r18
 9ca:	3f 93       	push	r19
 9cc:	4f 93       	push	r20
 9ce:	5f 93       	push	r21
 9d0:	6f 93       	push	r22
 9d2:	7f 93       	push	r23
 9d4:	8f 93       	push	r24
 9d6:	9f 93       	push	r25
 9d8:	af 93       	push	r26
 9da:	bf 93       	push	r27
 9dc:	ef 93       	push	r30
 9de:	ff 93       	push	r31
	switch (TW_STATUS) {
 9e0:	81 b1       	in	r24, 0x01	; 1
 9e2:	88 7f       	andi	r24, 0xF8	; 248
 9e4:	88 32       	cpi	r24, 0x28	; 40
 9e6:	81 f0       	breq	.+32     	; 0xa08 <__vector_19+0x4a>
 9e8:	40 f4       	brcc	.+16     	; 0x9fa <__vector_19+0x3c>
 9ea:	80 31       	cpi	r24, 0x10	; 16
 9ec:	69 f0       	breq	.+26     	; 0xa08 <__vector_19+0x4a>
 9ee:	88 31       	cpi	r24, 0x18	; 24
 9f0:	59 f0       	breq	.+22     	; 0xa08 <__vector_19+0x4a>
 9f2:	88 30       	cpi	r24, 0x08	; 8
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__vector_19+0x3a>
 9f6:	40 c0       	rjmp	.+128    	; 0xa78 <__vector_19+0xba>
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__vector_19+0x4a>
 9fa:	80 35       	cpi	r24, 0x50	; 80
 9fc:	71 f1       	breq	.+92     	; 0xa5a <__vector_19+0x9c>
 9fe:	88 35       	cpi	r24, 0x58	; 88
 a00:	a1 f1       	breq	.+104    	; 0xa6a <__vector_19+0xac>
 a02:	80 34       	cpi	r24, 0x40	; 64
 a04:	c9 f5       	brne	.+114    	; 0xa78 <__vector_19+0xba>
 a06:	2e c0       	rjmp	.+92     	; 0xa64 <__vector_19+0xa6>
		case TW_START:
		case TW_REP_START:
		case TW_MT_SLA_ACK: //Transmitadresse gesendet
		case TW_MT_DATA_ACK: //data gesendet
		if(transmission.mode == MODE_REG_READ && transmission.index == 2) {
 a08:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <_ZL12transmission+0x21>
 a0c:	82 30       	cpi	r24, 0x02	; 2
 a0e:	59 f4       	brne	.+22     	; 0xa26 <__vector_19+0x68>
 a10:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <_ZL12transmission+0x22>
 a14:	82 30       	cpi	r24, 0x02	; 2
 a16:	39 f4       	brne	.+14     	; 0xa26 <__vector_19+0x68>
			twi_send(transmission.buffer[0] | TW_READ);
 a18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <_ZL12transmission>
 a1c:	81 60       	ori	r24, 0x01	; 1
void twi_nack() {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

void twi_send(uint8_t data) {
	TWDR = data;
 a1e:	83 b9       	out	0x03, r24	; 3
void twi_ack() {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
}

void twi_nack() {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
 a20:	85 e8       	ldi	r24, 0x85	; 133
 a22:	86 bf       	out	0x36, r24	; 54
 a24:	2d c0       	rjmp	.+90     	; 0xa80 <__vector_19+0xc2>
		case TW_MT_SLA_ACK: //Transmitadresse gesendet
		case TW_MT_DATA_ACK: //data gesendet
		if(transmission.mode == MODE_REG_READ && transmission.index == 2) {
			twi_send(transmission.buffer[0] | TW_READ);
			twi_nack();
		} else if (transmission.index < transmission.length) {
 a26:	ab eb       	ldi	r26, 0xBB	; 187
 a28:	b0 e0       	ldi	r27, 0x00	; 0
 a2a:	92 96       	adiw	r26, 0x22	; 34
 a2c:	ec 91       	ld	r30, X
 a2e:	92 97       	sbiw	r26, 0x22	; 34
 a30:	90 96       	adiw	r26, 0x20	; 32
 a32:	8c 91       	ld	r24, X
 a34:	e8 17       	cp	r30, r24
 a36:	60 f4       	brcc	.+24     	; 0xa50 <__vector_19+0x92>
			twi_send(transmission.buffer[transmission.index++]);
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	8e 0f       	add	r24, r30
 a3c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <_ZL12transmission+0x22>
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	e5 54       	subi	r30, 0x45	; 69
 a44:	ff 4f       	sbci	r31, 0xFF	; 255
 a46:	80 81       	ld	r24, Z
void twi_nack() {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
}

void twi_send(uint8_t data) {
	TWDR = data;
 a48:	83 b9       	out	0x03, r24	; 3
void twi_ack() {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
}

void twi_nack() {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
 a4a:	85 e8       	ldi	r24, 0x85	; 133
 a4c:	86 bf       	out	0x36, r24	; 54
 a4e:	18 c0       	rjmp	.+48     	; 0xa80 <__vector_19+0xc2>
void twi_start(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);
}

void twi_stop(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 a50:	84 e9       	ldi	r24, 0x94	; 148
 a52:	86 bf       	out	0x36, r24	; 54
		} else if (transmission.index < transmission.length) {
			twi_send(transmission.buffer[transmission.index++]);
			twi_nack();
		} else {
			twi_stop();
			twi_done();
 a54:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z8twi_donev>
 a58:	13 c0       	rjmp	.+38     	; 0xa80 <__vector_19+0xc2>
		}
		break;

		case TW_MR_DATA_ACK:  //Daten empfangen
		twi_recv();
 a5a:	0e 94 86 04 	call	0x90c	; 0x90c <_Z8twi_recvv>
		twi_reply();
 a5e:	0e 94 95 04 	call	0x92a	; 0x92a <_Z9twi_replyv>
		break;
 a62:	0e c0       	rjmp	.+28     	; 0xa80 <__vector_19+0xc2>

		case TW_MR_SLA_ACK: //Reciveaddresse gesendet
		twi_reply();
 a64:	0e 94 95 04 	call	0x92a	; 0x92a <_Z9twi_replyv>
		break;
 a68:	0b c0       	rjmp	.+22     	; 0xa80 <__vector_19+0xc2>

		case TW_MR_DATA_NACK: //kein ack erhalten
		twi_recv();
 a6a:	0e 94 86 04 	call	0x90c	; 0x90c <_Z8twi_recvv>
void twi_start(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);
}

void twi_stop(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 a6e:	84 e9       	ldi	r24, 0x94	; 148
 a70:	86 bf       	out	0x36, r24	; 54
		break;

		case TW_MR_DATA_NACK: //kein ack erhalten
		twi_recv();
		twi_stop();
		twi_done();
 a72:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z8twi_donev>
		break;
 a76:	04 c0       	rjmp	.+8      	; 0xa80 <__vector_19+0xc2>
void twi_start(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);
}

void twi_stop(void) {
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 a78:	84 e9       	ldi	r24, 0x94	; 148
 a7a:	86 bf       	out	0x36, r24	; 54
		case TW_MT_SLA_NACK:
		case TW_MR_SLA_NACK:
		case TW_MT_DATA_NACK:
		default:
		twi_stop();
		twi_done();
 a7c:	0e 94 a5 04 	call	0x94a	; 0x94a <_Z8twi_donev>
		break;
	}
 a80:	ff 91       	pop	r31
 a82:	ef 91       	pop	r30
 a84:	bf 91       	pop	r27
 a86:	af 91       	pop	r26
 a88:	9f 91       	pop	r25
 a8a:	8f 91       	pop	r24
 a8c:	7f 91       	pop	r23
 a8e:	6f 91       	pop	r22
 a90:	5f 91       	pop	r21
 a92:	4f 91       	pop	r20
 a94:	3f 91       	pop	r19
 a96:	2f 91       	pop	r18
 a98:	0f 90       	pop	r0
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	0f 90       	pop	r0
 a9e:	1f 90       	pop	r1
 aa0:	18 95       	reti

00000aa2 <__vector_13>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 aa2:	1f 92       	push	r1
 aa4:	0f 92       	push	r0
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	0f 92       	push	r0
 aaa:	11 24       	eor	r1, r1
 aac:	2f 93       	push	r18
 aae:	8f 93       	push	r24
 ab0:	9f 93       	push	r25
 ab2:	ef 93       	push	r30
 ab4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 ab6:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
 ab8:	2c b1       	in	r18, 0x0c	; 12
    #endif
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 aba:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 abc:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <UART_RxHead>
 ac0:	ef 5f       	subi	r30, 0xFF	; 255
 ac2:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 ac4:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <UART_RxTail>
 ac8:	e9 17       	cp	r30, r25
 aca:	39 f0       	breq	.+14     	; 0xada <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 acc:	e0 93 e3 00 	sts	0x00E3, r30	; 0x8000e3 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	ea 51       	subi	r30, 0x1A	; 26
 ad4:	ff 4f       	sbci	r31, 0xFF	; 255
 ad6:	20 83       	st	Z, r18
 ad8:	01 c0       	rjmp	.+2      	; 0xadc <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 ada:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 adc:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <UART_LastRxError>
 ae0:	89 2b       	or	r24, r25
 ae2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <UART_LastRxError>
}
 ae6:	ff 91       	pop	r31
 ae8:	ef 91       	pop	r30
 aea:	9f 91       	pop	r25
 aec:	8f 91       	pop	r24
 aee:	2f 91       	pop	r18
 af0:	0f 90       	pop	r0
 af2:	0f be       	out	0x3f, r0	; 63
 af4:	0f 90       	pop	r0
 af6:	1f 90       	pop	r1
 af8:	18 95       	reti

00000afa <__vector_14>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 afa:	1f 92       	push	r1
 afc:	0f 92       	push	r0
 afe:	0f b6       	in	r0, 0x3f	; 63
 b00:	0f 92       	push	r0
 b02:	11 24       	eor	r1, r1
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	ef 93       	push	r30
 b0a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 b0c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <UART_TxHead>
 b10:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <UART_TxTail>
 b14:	98 17       	cp	r25, r24
 b16:	61 f0       	breq	.+24     	; 0xb30 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 b18:	e0 91 e4 00 	lds	r30, 0x00E4	; 0x8000e4 <UART_TxTail>
 b1c:	ef 5f       	subi	r30, 0xFF	; 255
 b1e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 b20:	e0 93 e4 00 	sts	0x00E4, r30	; 0x8000e4 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	ea 5f       	subi	r30, 0xFA	; 250
 b28:	fe 4f       	sbci	r31, 0xFE	; 254
 b2a:	80 81       	ld	r24, Z
 b2c:	8c b9       	out	0x0c, r24	; 12
 b2e:	01 c0       	rjmp	.+2      	; 0xb32 <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 b30:	55 98       	cbi	0x0a, 5	; 10
    }
}
 b32:	ff 91       	pop	r31
 b34:	ef 91       	pop	r30
 b36:	9f 91       	pop	r25
 b38:	8f 91       	pop	r24
 b3a:	0f 90       	pop	r0
 b3c:	0f be       	out	0x3f, r0	; 63
 b3e:	0f 90       	pop	r0
 b40:	1f 90       	pop	r1
 b42:	18 95       	reti

00000b44 <_ZN7TwoWire5writeEh>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
 b44:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <_ZN7TwoWire12transmittingE>
 b48:	88 23       	and	r24, r24
 b4a:	99 f0       	breq	.+38     	; 0xb72 <_ZN7TwoWire5writeEh+0x2e>
 b4c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_ZN7TwoWire14txBufferLengthE>
 b50:	80 32       	cpi	r24, 0x20	; 32
 b52:	90 f4       	brcc	.+36     	; 0xb78 <_ZN7TwoWire5writeEh+0x34>
 b54:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_ZN7TwoWire13txBufferIndexE>
 b58:	e8 2f       	mov	r30, r24
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	e5 5d       	subi	r30, 0xD5	; 213
 b5e:	fe 4f       	sbci	r31, 0xFE	; 254
 b60:	60 83       	st	Z, r22
 b62:	8f 5f       	subi	r24, 0xFF	; 255
 b64:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_ZN7TwoWire13txBufferIndexE>
 b68:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_ZN7TwoWire14txBufferLengthE>
 b6c:	81 e0       	ldi	r24, 0x01	; 1
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	08 95       	ret
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	08 95       	ret
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	08 95       	ret

00000b7e <_ZN7TwoWire5writeEPKhj>:
 b7e:	cf 92       	push	r12
 b80:	df 92       	push	r13
 b82:	ef 92       	push	r14
 b84:	ff 92       	push	r15
 b86:	0f 93       	push	r16
 b88:	1f 93       	push	r17
 b8a:	cf 93       	push	r28
 b8c:	df 93       	push	r29
 b8e:	8c 01       	movw	r16, r24
 b90:	6a 01       	movw	r12, r20
 b92:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <_ZN7TwoWire12transmittingE>
 b96:	88 23       	and	r24, r24
 b98:	99 f0       	breq	.+38     	; 0xbc0 <_ZN7TwoWire5writeEPKhj+0x42>
 b9a:	41 15       	cp	r20, r1
 b9c:	51 05       	cpc	r21, r1
 b9e:	81 f0       	breq	.+32     	; 0xbc0 <_ZN7TwoWire5writeEPKhj+0x42>
 ba0:	eb 01       	movw	r28, r22
 ba2:	7b 01       	movw	r14, r22
 ba4:	e4 0e       	add	r14, r20
 ba6:	f5 1e       	adc	r15, r21
 ba8:	69 91       	ld	r22, Y+
 baa:	d8 01       	movw	r26, r16
 bac:	ed 91       	ld	r30, X+
 bae:	fc 91       	ld	r31, X
 bb0:	01 90       	ld	r0, Z+
 bb2:	f0 81       	ld	r31, Z
 bb4:	e0 2d       	mov	r30, r0
 bb6:	c8 01       	movw	r24, r16
 bb8:	09 95       	icall
 bba:	ce 15       	cp	r28, r14
 bbc:	df 05       	cpc	r29, r15
 bbe:	a1 f7       	brne	.-24     	; 0xba8 <_ZN7TwoWire5writeEPKhj+0x2a>
 bc0:	c6 01       	movw	r24, r12
 bc2:	df 91       	pop	r29
 bc4:	cf 91       	pop	r28
 bc6:	1f 91       	pop	r17
 bc8:	0f 91       	pop	r16
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	df 90       	pop	r13
 bd0:	cf 90       	pop	r12
 bd2:	08 95       	ret

00000bd4 <_ZN7TwoWire9availableEv>:
 bd4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ZN7TwoWire14rxBufferLengthE>
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <_ZN7TwoWire13rxBufferIndexE>
 bde:	82 1b       	sub	r24, r18
 be0:	91 09       	sbc	r25, r1
 be2:	08 95       	ret

00000be4 <_ZN7TwoWire4readEv>:
 be4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ZN7TwoWire13rxBufferIndexE>
 be8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ZN7TwoWire14rxBufferLengthE>
 bec:	98 17       	cp	r25, r24
 bee:	50 f4       	brcc	.+20     	; 0xc04 <_ZN7TwoWire4readEv+0x20>
 bf0:	e9 2f       	mov	r30, r25
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	e3 5b       	subi	r30, 0xB3	; 179
 bf6:	fe 4f       	sbci	r31, 0xFE	; 254
 bf8:	20 81       	ld	r18, Z
 bfa:	30 e0       	ldi	r19, 0x00	; 0
 bfc:	9f 5f       	subi	r25, 0xFF	; 255
 bfe:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ZN7TwoWire13rxBufferIndexE>
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <_ZN7TwoWire4readEv+0x24>
 c04:	2f ef       	ldi	r18, 0xFF	; 255
 c06:	3f ef       	ldi	r19, 0xFF	; 255
 c08:	c9 01       	movw	r24, r18
 c0a:	08 95       	ret

00000c0c <_ZN7TwoWire4peekEv>:
 c0c:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <_ZN7TwoWire13rxBufferIndexE>
 c10:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ZN7TwoWire14rxBufferLengthE>
 c14:	e8 17       	cp	r30, r24
 c16:	30 f4       	brcc	.+12     	; 0xc24 <_ZN7TwoWire4peekEv+0x18>
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	e3 5b       	subi	r30, 0xB3	; 179
 c1c:	fe 4f       	sbci	r31, 0xFE	; 254
 c1e:	80 81       	ld	r24, Z
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	08 95       	ret
 c24:	8f ef       	ldi	r24, 0xFF	; 255
 c26:	9f ef       	ldi	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <_ZN7TwoWire5flushEv>:
 c2a:	08 95       	ret

00000c2c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
 c2c:	8e e6       	ldi	r24, 0x6E	; 110
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Wire+0x1>
 c34:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Wire>
 c38:	08 95       	ret

00000c3a <main>:

Goldboard4 gb;

int main(void)
{	
	DDRC |= (1<<PC7);
 c3a:	a7 9a       	sbi	0x14, 7	; 20
	DDRC |= (1<<PC6);
 c3c:	a6 9a       	sbi	0x14, 6	; 20
	PORTC &= ~(1<<PC7);
 c3e:	af 98       	cbi	0x15, 7	; 21
	PORTC &= ~(1<<PC6);
 c40:	ae 98       	cbi	0x15, 6	; 21
	while(1)
	{
		gb.motor[1].rotate(100);
 c42:	64 e6       	ldi	r22, 0x64	; 100
 c44:	70 e0       	ldi	r23, 0x00	; 0
 c46:	80 e7       	ldi	r24, 0x70	; 112
 c48:	91 e0       	ldi	r25, 0x01	; 1
 c4a:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
		gb.motor[0].rotate(-50);
 c4e:	6e ec       	ldi	r22, 0xCE	; 206
 c50:	7f ef       	ldi	r23, 0xFF	; 255
 c52:	8d e6       	ldi	r24, 0x6D	; 109
 c54:	91 e0       	ldi	r25, 0x01	; 1
 c56:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
		gb.motor[3].rotate(-30);
 c5a:	62 ee       	ldi	r22, 0xE2	; 226
 c5c:	7f ef       	ldi	r23, 0xFF	; 255
 c5e:	86 e7       	ldi	r24, 0x76	; 118
 c60:	91 e0       	ldi	r25, 0x01	; 1
 c62:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
		gb.motor[2].rotate(40);
 c66:	68 e2       	ldi	r22, 0x28	; 40
 c68:	70 e0       	ldi	r23, 0x00	; 0
 c6a:	83 e7       	ldi	r24, 0x73	; 115
 c6c:	91 e0       	ldi	r25, 0x01	; 1
 c6e:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c72:	2f ef       	ldi	r18, 0xFF	; 255
 c74:	89 e6       	ldi	r24, 0x69	; 105
 c76:	98 e1       	ldi	r25, 0x18	; 24
 c78:	21 50       	subi	r18, 0x01	; 1
 c7a:	80 40       	sbci	r24, 0x00	; 0
 c7c:	90 40       	sbci	r25, 0x00	; 0
 c7e:	e1 f7       	brne	.-8      	; 0xc78 <main+0x3e>
 c80:	00 c0       	rjmp	.+0      	; 0xc82 <main+0x48>
 c82:	00 00       	nop
		delay(500);
		gb.motor[0].rotate(0);
 c84:	60 e0       	ldi	r22, 0x00	; 0
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	8d e6       	ldi	r24, 0x6D	; 109
 c8a:	91 e0       	ldi	r25, 0x01	; 1
 c8c:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
		gb.motor[1].rotate(0);
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	80 e7       	ldi	r24, 0x70	; 112
 c96:	91 e0       	ldi	r25, 0x01	; 1
 c98:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
		gb.motor[2].rotate(0);
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	83 e7       	ldi	r24, 0x73	; 115
 ca2:	91 e0       	ldi	r25, 0x01	; 1
 ca4:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
		gb.motor[3].rotate(0);
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	86 e7       	ldi	r24, 0x76	; 118
 cae:	91 e0       	ldi	r25, 0x01	; 1
 cb0:	0e 94 34 02 	call	0x468	; 0x468 <_ZN5Motor6rotateEi>
 cb4:	2f ef       	ldi	r18, 0xFF	; 255
 cb6:	89 e6       	ldi	r24, 0x69	; 105
 cb8:	98 e1       	ldi	r25, 0x18	; 24
 cba:	21 50       	subi	r18, 0x01	; 1
 cbc:	80 40       	sbci	r24, 0x00	; 0
 cbe:	90 40       	sbci	r25, 0x00	; 0
 cc0:	e1 f7       	brne	.-8      	; 0xcba <main+0x80>
 cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <main+0x8a>
 cc4:	00 00       	nop
 cc6:	bd cf       	rjmp	.-134    	; 0xc42 <main+0x8>

00000cc8 <_GLOBAL__sub_I_gb>:
**/

#include "Goldboard4.h"
#include "twi.h"

Goldboard4 gb;
 cc8:	8d e6       	ldi	r24, 0x6D	; 109
 cca:	91 e0       	ldi	r25, 0x01	; 1
 ccc:	0e 94 56 00 	call	0xac	; 0xac <_ZN10Goldboard4C1Ev>
 cd0:	08 95       	ret

00000cd2 <__udivmodhi4>:
 cd2:	aa 1b       	sub	r26, r26
 cd4:	bb 1b       	sub	r27, r27
 cd6:	51 e1       	ldi	r21, 0x11	; 17
 cd8:	07 c0       	rjmp	.+14     	; 0xce8 <__udivmodhi4_ep>

00000cda <__udivmodhi4_loop>:
 cda:	aa 1f       	adc	r26, r26
 cdc:	bb 1f       	adc	r27, r27
 cde:	a6 17       	cp	r26, r22
 ce0:	b7 07       	cpc	r27, r23
 ce2:	10 f0       	brcs	.+4      	; 0xce8 <__udivmodhi4_ep>
 ce4:	a6 1b       	sub	r26, r22
 ce6:	b7 0b       	sbc	r27, r23

00000ce8 <__udivmodhi4_ep>:
 ce8:	88 1f       	adc	r24, r24
 cea:	99 1f       	adc	r25, r25
 cec:	5a 95       	dec	r21
 cee:	a9 f7       	brne	.-22     	; 0xcda <__udivmodhi4_loop>
 cf0:	80 95       	com	r24
 cf2:	90 95       	com	r25
 cf4:	bc 01       	movw	r22, r24
 cf6:	cd 01       	movw	r24, r26
 cf8:	08 95       	ret

00000cfa <__divmodhi4>:
 cfa:	97 fb       	bst	r25, 7
 cfc:	07 2e       	mov	r0, r23
 cfe:	16 f4       	brtc	.+4      	; 0xd04 <__divmodhi4+0xa>
 d00:	00 94       	com	r0
 d02:	07 d0       	rcall	.+14     	; 0xd12 <__divmodhi4_neg1>
 d04:	77 fd       	sbrc	r23, 7
 d06:	09 d0       	rcall	.+18     	; 0xd1a <__divmodhi4_neg2>
 d08:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__udivmodhi4>
 d0c:	07 fc       	sbrc	r0, 7
 d0e:	05 d0       	rcall	.+10     	; 0xd1a <__divmodhi4_neg2>
 d10:	3e f4       	brtc	.+14     	; 0xd20 <__divmodhi4_exit>

00000d12 <__divmodhi4_neg1>:
 d12:	90 95       	com	r25
 d14:	81 95       	neg	r24
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	08 95       	ret

00000d1a <__divmodhi4_neg2>:
 d1a:	70 95       	com	r23
 d1c:	61 95       	neg	r22
 d1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000d20 <__divmodhi4_exit>:
 d20:	08 95       	ret

00000d22 <__udivmodsi4>:
 d22:	a1 e2       	ldi	r26, 0x21	; 33
 d24:	1a 2e       	mov	r1, r26
 d26:	aa 1b       	sub	r26, r26
 d28:	bb 1b       	sub	r27, r27
 d2a:	fd 01       	movw	r30, r26
 d2c:	0d c0       	rjmp	.+26     	; 0xd48 <__udivmodsi4_ep>

00000d2e <__udivmodsi4_loop>:
 d2e:	aa 1f       	adc	r26, r26
 d30:	bb 1f       	adc	r27, r27
 d32:	ee 1f       	adc	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	a2 17       	cp	r26, r18
 d38:	b3 07       	cpc	r27, r19
 d3a:	e4 07       	cpc	r30, r20
 d3c:	f5 07       	cpc	r31, r21
 d3e:	20 f0       	brcs	.+8      	; 0xd48 <__udivmodsi4_ep>
 d40:	a2 1b       	sub	r26, r18
 d42:	b3 0b       	sbc	r27, r19
 d44:	e4 0b       	sbc	r30, r20
 d46:	f5 0b       	sbc	r31, r21

00000d48 <__udivmodsi4_ep>:
 d48:	66 1f       	adc	r22, r22
 d4a:	77 1f       	adc	r23, r23
 d4c:	88 1f       	adc	r24, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	1a 94       	dec	r1
 d52:	69 f7       	brne	.-38     	; 0xd2e <__udivmodsi4_loop>
 d54:	60 95       	com	r22
 d56:	70 95       	com	r23
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	9b 01       	movw	r18, r22
 d5e:	ac 01       	movw	r20, r24
 d60:	bd 01       	movw	r22, r26
 d62:	cf 01       	movw	r24, r30
 d64:	08 95       	ret

00000d66 <__tablejump2__>:
 d66:	ee 0f       	add	r30, r30
 d68:	ff 1f       	adc	r31, r31
 d6a:	05 90       	lpm	r0, Z+
 d6c:	f4 91       	lpm	r31, Z
 d6e:	e0 2d       	mov	r30, r0
 d70:	09 94       	ijmp

00000d72 <memcpy>:
 d72:	fb 01       	movw	r30, r22
 d74:	dc 01       	movw	r26, r24
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <memcpy+0xa>
 d78:	01 90       	ld	r0, Z+
 d7a:	0d 92       	st	X+, r0
 d7c:	41 50       	subi	r20, 0x01	; 1
 d7e:	50 40       	sbci	r21, 0x00	; 0
 d80:	d8 f7       	brcc	.-10     	; 0xd78 <memcpy+0x6>
 d82:	08 95       	ret

00000d84 <_exit>:
 d84:	f8 94       	cli

00000d86 <__stop_program>:
 d86:	ff cf       	rjmp	.-2      	; 0xd86 <__stop_program>
